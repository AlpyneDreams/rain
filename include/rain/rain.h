#pragma once

#include <typeinfo>
#include <typeindex>
#include <string>
#include <vector>
#include <map>
#include <unordered_map>
#include <cstddef>

#include <entt/core/type_info.hpp>

namespace rain
{
    using uintmax = std::uintmax_t;

    /** Extend this class to enable RTTI generation for subclasses. */
    struct Reflect {};

    using Type = entt::type_info;
    using Hash = entt::id_type;
    
    // Get type info.
    // Has to be function not variable or else we can get invalid results sometimes
    template <typename T>
    Type TypeID() { return entt::type_id<T>(); }

    // Type hashes (constexpr)
    template <typename T>
    constexpr Hash TypeHash = entt::type_hash<T>::value();

    template <typename T>
    struct Registry
    {
        static inline T& Register(T&& c) {
            registry.insert({ c.type.hash(), c });
            return c;
        }

        template <typename U>
        static inline T* Get() {
            return Get(TypeHash<U>);
        }

        static inline T* Get(Hash hash) {
            return registry.contains(hash) ? &registry.at(hash) : nullptr;
        }

        static inline T* Get(Type type) {
            return Get(type.hash());
        }

        static inline std::unordered_map<Hash, T> registry;
    };

    struct Field
    {
        const char* name;
        const char* displayName;
        Type type = TypeID<std::nullptr_t>();
        size_t offset;

        template <typename T>
        T* GetPointer(void* obj) const {
            return reinterpret_cast<T*>((char*)obj + offset);
        }

        template <typename T>
        T& Get(void* obj) const {
            return *GetPointer<T>(obj);
        }
    };

    struct Class : Registry<Class>
    {
        const char* name;
        const char* displayName;
        Type type = TypeID<std::nullptr_t>();
        size_t size;
        std::vector<Field> fields;
    };

    struct Enum : Registry<Enum>
    {
        const char* name;
        const char* displayName;
        Type type = TypeID<std::nullptr_t>();
        size_t size;
        Type underlyingType = TypeID<std::nullptr_t>();
        bool scoped = true;
        std::map<std::string, std::uintmax_t> values;
        std::map<std::uintmax_t, std::string> names;

        // TODO: display names, preserve declaration order, flags

        // Follows enum's integer order
        auto begin() const { return names.begin(); }
        auto end() const { return names.end(); }

        template <typename E>
        static std::string Name(auto value) {
            return Enum::Get<E>()->GetName(value);
        }

        // Returns the largest possible value of the given enum
        template <typename E>
        static E Max() {
            return E(Enum::Get<E>()->names.rbegin()->first);
        }

        std::string GetName(auto value) const {
            return names.at(value);
        }

        auto GetValue(std::string& name) const {
            return values.at(name);
        }
    };
}

// This namespace contains all autogenerated RTTI data.
namespace rain::rtti
{
    template <class T>
    Class ClassDef;

    template <class T>
    Enum EnumDef;
}
