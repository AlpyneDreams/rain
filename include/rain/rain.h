#pragma once

#include "impl/config.h"

#include <string>
#include <vector>
#include <map>
#include <unordered_map>
#include <cstddef>
#include <iterator>
#include <ranges>

#include "impl/type.h"

namespace rain
{
    /** Extend this class to enable RTTI generation for subclasses. */
    struct Reflect {};

    /** The name of type T **/
    template <typename T>
    constexpr std::string_view TypeName = internal::GetTypeName<T>();

    /** A unique type hash for type T **/
    template <typename T>
    constexpr Hash TypeHash = internal::GetTypeHash<T>();

    /** Type info as returned by TypeID<T> **/
    struct Type final
    {
        Hash hash;
        std::string_view name;

        template <typename T, typename Plain = internal::PlainType<T>>
        constexpr Type(std::in_place_type_t<T>) noexcept
          : hash {TypeHash<Plain>},
            name {TypeName<Plain>}
        {}

        constexpr Type(const Type& type) noexcept
          : hash {type.hash},
            name {type.name}
        {}

        // Null Type (Default Constructor)
        constexpr Type() noexcept
          : hash {TypeHash<std::nullptr_t>},
            name {TypeName<std::nullptr_t>}
        {}

        constexpr operator bool() const {
            return hash != TypeHash<std::nullptr_t>;
        }

        constexpr auto operator <=>(const Type& rhs) const { return hash <=> rhs.hash; }
    };

    template <typename T>
    constexpr Type TypeID = Type(std::in_place_type<internal::PlainType<T>>);


    /** Base class for RTTI registries: Class, Enum, etc. **/
    template <typename T>
    struct Registry
    {
        // Called by autogenerated RTTI code.
        static inline T& Register(T&& c) {
            registry.insert({ c.type.hash, c });
            return c;
        }

        template <typename U>
        static inline T* Get() {
            return Get(TypeHash<U>);
        }

        static inline T* Get(Hash hash) {
            return registry.contains(hash) ? &registry.at(hash) : nullptr;
        }

        static inline T* Get(Type type) {
            return Get(type.hash);
        }

        static inline std::unordered_map<Hash, T> registry;
    };

    /** RTTI data for a field in a struct or class. **/
    struct Field
    {
        const char* name;
        const char* displayName;
        Type type;
        size_t offset;

        template <typename T>
        T* GetPointer(void* obj) const {
            return reinterpret_cast<T*>((char*)obj + offset);
        }

        template <typename T>
        T& Get(void* obj) const {
            return *GetPointer<T>(obj);
        }
    };

    /** RTTI data for a class or struct. **/
    struct Class : Registry<Class>
    {
        const char* name;
        const char* displayName;
        Type type;
        size_t size;
        std::vector<Field> fields;
    };

    /** RTTI data for an enum. **/
    struct Enum : Registry<Enum>
    {
        const char* name;
        const char* displayName;
        Type type;
        size_t size;
        Type underlyingType;
        bool scoped = true;
        std::map<std::string, std::uintmax_t> values;
        std::map<std::uintmax_t, std::string> names;

        // TODO: display names, preserve declaration order, flags

        // Follows enum's integer order
        auto begin() const { return names.begin(); }
        auto end() const { return names.end(); }

        template <typename E>
        static std::string Name(auto value) {
            return Enum::Get<E>()->GetName(value);
        }

        // Returns the largest possible value of the given enum
        template <typename E>
        static E Max() {
            return E(Enum::Get<E>()->names.rbegin()->first);
        }

        std::string GetName(auto value) const {
            return names.at(value);
        }

        auto GetValue(std::string& valueName) const {
            return values.at(valueName);
        }
    };
}

// This namespace contains all autogenerated RTTI data.
namespace rain::rtti
{
    template <class T>
    Class ClassDef;

    template <class T>
    Enum EnumDef;
}
